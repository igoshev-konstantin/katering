#Directional
#1 OneToMany
https://www.baeldung.com/hibernate-one-to-many

#2 ManyToMany
https://www.baeldung.com/hibernate-many-to-many

#Composite keys
#1
https://www.baeldung.com/jpa-embedded-embeddable

#FlyWay
Работа FlyWay:
Для отслеживания когда, кем и какие миграции были применены, в схему базы данных добавляется специальная таблица с
метаданными. В этой таблице также хранятся контрольные суммы миграций и информация о том успешна была миграция или нет.
Фреймворк работает следующим образом:
Проверяет схему базы данных на наличие таблицы метаданных (по умолчанию SCHEMA_VERSION). Если таблица метаданных не
существует, то создает ее.
Сканирует classpath на наличие доступных миграций.
Сравнивает миграции с таблицей метаданных. Если номер версии меньше или равен версии, помеченной как текущая,
то игнорирует ее.
Отмечает все оставшиеся миграции как ожидающие (pending). Потом сортирует их по возрастанию номеров версий и выполняет
в указанном порядке.
По мере применения миграций обновляет таблицу метаданных.

#Lombok
@Data - It’s a Lombok annotation and tells Lombok to create getter and setter for all attributes.
@AllArgsConstructor - Tells Lombok to create a constructor with all class attributes
@NoArgsConstructor - Tells Lombok to create another constructor with no arguments. It is useful for JPA.

#ORM/JPA — Object-Relational Mapping/Java Persistence API
Это технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков
программирования. Если упростить, то ORM это связь Java объектов и записей в БД:
ORM — это по сути концепция о том, что Java объект можно представить как данные в БД (и наоборот). Она нашла воплощение
 в виде спецификации JPA — Java Persistence API.
Спецификация — это уже описание Java API, которое выражает эту концепцию. Спецификация рассказывает, какими средствами
мы должны быть обеспечены (т.е. через какие интерфейсы мы сможем работать), чтобы работать по концепции ORM. И как
использовать эти средства.

#Наследование Hibernate. Выбор стратегии
1. Одна таблица для каждого класса
2. Одна таблица для каждого класса с объединениями (UNION) - 1С. Объединение
3. Единая таблица для всей иерархии классов
4. Одна таблица для каждого класса с использованием соединений (JOIN) - 1С. Основная таблица и Левое соединение
второстепенной
https://habr.com/ru/post/337488/

@Inheritance(strategy.)
https://sysout.ru/nasledovanie-sushhnostej-s-pomoshhyu-joined-table-primer-na-hibernate-i-spring-boot/



